{"version":3,"file":"createSpan.js","sourceRoot":"","sources":["../../src/createSpan.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAAqB,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AACjE,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAmBhD;;;;;GAKG;AACH,MAAM,UAAU,kBAAkB,CAAC,EAAwC;QAAtC,aAAa,mBAAA,EAAE,SAAS,eAAA;IAC3D,OAAO,UACL,aAAqB,EACrB,gBAAmB;QAEnB,IAAM,MAAM,GAAG,SAAS,EAAE,CAAC;QAC3B,IAAM,cAAc,GAAG,gBAAgB,CAAC,cAAc,IAAI,EAAE,CAAC;QAC7D,IAAM,WAAW,yBACZ,cAAc,CAAC,WAAW,KAC7B,IAAI,EAAE,QAAQ,CAAC,QAAQ,GACxB,CAAC;QAEF,IAAM,IAAI,GAAG,MAAM,CAAC,SAAS,CAAI,aAAa,SAAI,aAAe,EAAE,WAAW,CAAC,CAAC;QAEhF,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;QAE7C,IAAI,cAAc,GAAG,cAAc,CAAC,WAAW,IAAI,EAAE,CAAC;QACtD,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE;YACtB,cAAc,yBACT,cAAc,CAAC,WAAW,KAC7B,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,EACtB,UAAU,wBACL,WAAW,CAAC,UAAU,KACzB,cAAc,EAAE,SAAS,MAE5B,CAAC;SACH;QAED,IAAM,iBAAiB,yBAClB,cAAc,KACjB,WAAW,EAAE,cAAc,GAC5B,CAAC;QAEF,IAAM,mBAAmB,yBACpB,gBAAgB,KACnB,cAAc,EAAE,iBAAiB,GAClC,CAAC;QAEF,OAAO;YACL,IAAI,MAAA;YACJ,cAAc,EAAE,mBAAmB;SACpC,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Span, SpanOptions, SpanKind } from \"@opentelemetry/api\";\nimport { getTracer } from \"@azure/core-tracing\";\nimport { OperationOptions } from \"./coreHttp\";\n\ntype OperationTracingOptions = OperationOptions[\"tracingOptions\"];\n\n/**\n * Configuration for creating a new Tracing Span\n */\nexport interface SpanConfig {\n  /**\n   * Package name prefix\n   */\n  packagePrefix: string;\n  /**\n   * Service namespace\n   */\n  namespace: string;\n}\n\n/**\n * Creates a function called createSpan to create spans using the global tracer.\n * @hidden\n * @param spanConfig - The name of the operation being performed.\n * @param tracingOptions - The options for the underlying http request.\n */\nexport function createSpanFunction({ packagePrefix, namespace }: SpanConfig) {\n  return function<T extends OperationOptions>(\n    operationName: string,\n    operationOptions: T\n  ): { span: Span; updatedOptions: T } {\n    const tracer = getTracer();\n    const tracingOptions = operationOptions.tracingOptions || {};\n    const spanOptions: SpanOptions = {\n      ...tracingOptions.spanOptions,\n      kind: SpanKind.INTERNAL\n    };\n\n    const span = tracer.startSpan(`${packagePrefix}.${operationName}`, spanOptions);\n\n    span.setAttribute(\"az.namespace\", namespace);\n\n    let newSpanOptions = tracingOptions.spanOptions || {};\n    if (span.isRecording()) {\n      newSpanOptions = {\n        ...tracingOptions.spanOptions,\n        parent: span.context(),\n        attributes: {\n          ...spanOptions.attributes,\n          \"az.namespace\": namespace\n        }\n      };\n    }\n\n    const newTracingOptions: OperationTracingOptions = {\n      ...tracingOptions,\n      spanOptions: newSpanOptions\n    };\n\n    const newOperationOptions: T = {\n      ...operationOptions,\n      tracingOptions: newTracingOptions\n    };\n\n    return {\n      span,\n      updatedOptions: newOperationOptions\n    };\n  };\n}\n"]}