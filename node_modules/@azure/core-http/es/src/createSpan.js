// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __assign } from "tslib";
import { SpanKind } from "@opentelemetry/api";
import { getTracer } from "@azure/core-tracing";
/**
 * Creates a function called createSpan to create spans using the global tracer.
 * @hidden
 * @param spanConfig - The name of the operation being performed.
 * @param tracingOptions - The options for the underlying http request.
 */
export function createSpanFunction(_a) {
    var packagePrefix = _a.packagePrefix, namespace = _a.namespace;
    return function (operationName, operationOptions) {
        var tracer = getTracer();
        var tracingOptions = operationOptions.tracingOptions || {};
        var spanOptions = __assign(__assign({}, tracingOptions.spanOptions), { kind: SpanKind.INTERNAL });
        var span = tracer.startSpan(packagePrefix + "." + operationName, spanOptions);
        span.setAttribute("az.namespace", namespace);
        var newSpanOptions = tracingOptions.spanOptions || {};
        if (span.isRecording()) {
            newSpanOptions = __assign(__assign({}, tracingOptions.spanOptions), { parent: span.context(), attributes: __assign(__assign({}, spanOptions.attributes), { "az.namespace": namespace }) });
        }
        var newTracingOptions = __assign(__assign({}, tracingOptions), { spanOptions: newSpanOptions });
        var newOperationOptions = __assign(__assign({}, operationOptions), { tracingOptions: newTracingOptions });
        return {
            span: span,
            updatedOptions: newOperationOptions
        };
    };
}
//# sourceMappingURL=createSpan.js.map